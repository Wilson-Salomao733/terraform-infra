name: Terraform Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      aws-assume-role-arn:
        type: string
        required: true
      aws-region:
        type: string
        required: true
      aws-statefile-s3-bucket:
        type: string
        required: true
      aws-lock-dynamodb-table:
        type: string
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2      

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug ENVIRONMENT variable
        run: |
          echo "ENVIRONMENT: ${{ env.ENVIRONMENT }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Terraform Init
        run: |
          cd infra && terraform init \
            -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ inputs.aws-region }}" \
            -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Destroy
        if: steps.read-destroy-config.outputs.destroy == 'true'
        id: terraform-destroy
        run: |
          cd infra && \
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }} && \
          terraform destroy -var-file="./envs/${{ env.ENVIRONMENT }}/terraform.tfvars" -auto-approve


      - name: Terraform Plan
        if: steps.read-destroy-config.outputs.destroy != 'true'
        id: terraform-plan
        run: |
          cd infra && \
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }} && \
          terraform plan -var-file="./envs/${{ env.ENVIRONMENT }}/terraform.tfvars" -out="${{ env.ENVIRONMENT }}.plan"

      - name: Terraform Apply
        if: steps.read-destroy-config.outputs.destroy != 'true'
        id: terraform-apply
        run: |
          cd infra && \
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }} && \
          terraform apply "${{ env.ENVIRONMENT }}.plan"